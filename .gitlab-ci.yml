before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  #
  ## Run ssh-agent (inside the build environment)
  #
  - eval $(ssh-agent -s)
  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null

  ##
  ## Create the SSH directory and give it the right permissions
  ##

  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  ##
  ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
  ## with your own domain name. You can copy and repeat that command if you have
  ## more than one server to connect to.
  ##
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

  ##
  ## You can optionally disable host key checking. Be aware that by adding that
  ## you are suspectible to man-in-the-middle attacks.
  ## WARNING: Use this only with the Docker executor, if you use it with shell
  ## you will overwrite your user's SSH config.
  ##
  #- '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

  ##
  ## Optionally, if you will be using any Git commands, set the user name and
  ## email.
  ##
  - git config --global user.email "lexie@protonmail.ch"
  - git config --global user.name "alexter42"
  
  
  
image: node:latest

stages:
  - build
  - deploy
  
variables:
  AWS_DEFAULT_REGION: us-east-1 
  BUCKET_NAME: jamxio-gitlab-site 
  
cache:
  untracked: true
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - node_modules
  
build_prod:
  stage: build
  tags: 
    - aws-spot-nodejs
  script:
    - ssh -v git@gitlab.com
    - yarn 
    - yarn start:build
  artifacts:
    paths:
      - dist/  # This is what we want to publish
    
    
deploys3:
  image: "python:latest"
  stage: deploy
  dependencies:
    - build_prod
  tags: 
    - aws-spot-nodejs
  before_script:
    - pip install awscli
  script:
    - aws s3 cp dist s3://${BUCKET_NAME}/ --recursive --cache-control public,max-age=604800
    - aws cloudfront create-invalidation --distribution-id $CDN_DISTRIBUTION_ID --paths "/*"
    - echo $CDN_DISTRIBUTION_ID
  environment:
    name: production

     